AC_PREREQ(2.54)

# Making releases:
#   LIBGNOMEUI_MICRO_VERSION += 1;
#   LIBGNOMEUI_INTERFACE_AGE += 1;
#   LIBGNOMEUI_BINARY_AGE += 1;
# if any functions have been added, set LIBGNOMEUI_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set LIBGNOMEUI_BINARY_AGE and LIBGNOMEUI_INTERFACE_AGE to 0.
#
m4_define([libgnomeui_major_version], [2])
m4_define([libgnomeui_minor_version], [19])
m4_define([libgnomeui_micro_version], [1])
m4_define([libgnomeui_interface_age], [1])
# If you need a modifier for the version number. 
# Normally empty, but can be used to make "fixup" releases.
m4_define([libgnomeui_extraversion], [])

dnl Required versions of other packages
m4_define([libxml_required_version],         [2.4.20]) 
m4_define([libgnome_required_version],       [2.13.7])
m4_define([libgnomecanvas_required_version], [2.0.0])
m4_define([libbonoboui_required_version],    [2.13.1])
m4_define([gconf_required_version],          [1.1.11])
m4_define([pango_required_version],          [1.1.2])
m4_define([glib_required_version],           [2.8.0])
m4_define([gtk_required_version],            [2.11.5])
m4_define([gnomevfs_required_version],       [2.7.3])
m4_define([libglade_required_version],       [2.0.0])
m4_define([gnome_keyring_required_version],       [0.4])

dnl libtool versioning from libgnome

m4_define([libgnomeui_current], [m4_eval(100 * libgnomeui_minor_version + libgnomeui_micro_version - libgnomeui_interface_age)])
m4_define([libgnomeui_binary_age], [m4_eval(100 * libgnomeui_minor_version + libgnomeui_micro_version)])
m4_define([libgnomeui_revision], [libgnomeui_interface_age])
m4_define([libgnomeui_age], [m4_eval(libgnomeui_binary_age - libgnomeui_interface_age)])
m4_define([libgnomeui_version], [libgnomeui_major_version().libgnomeui_minor_version().libgnomeui_micro_version()libgnomeui_extraversion()])

AC_INIT([libgnomeui], [libgnomeui_version],
        [http://bugzilla.gnome.org/enter_bug.cgi?product=libgnomeui])
AC_CONFIG_SRCDIR([libgnomeui/libgnomeui.h])

LIBGNOMEUI_MAJOR_VERSION=libgnomeui_major_version
LIBGNOMEUI_MINOR_VERSION=libgnomeui_minor_version
LIBGNOMEUI_MICRO_VERSION=libgnomeui_micro_version
LIBGNOMEUI_INTERFACE_AGE=libgnomeui_interface_age

dnl libtool versioning from libgnome

LIBGNOMEUI_CURRENT=libgnomeui_current
LIBGNOMEUI_REVISION=libgnomeui_revision
LIBGNOMEUI_AGE=libgnomeui_age

AC_SUBST(LIBGNOMEUI_CURRENT)
AC_SUBST(LIBGNOMEUI_REVISION)
AC_SUBST(LIBGNOMEUI_AGE)

AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

dnl make aclocal calls respect $ACLOCAL_FLAGS
ACLOCAL_AMFLAGS="\${ACLOCAL_FLAGS}"
AC_SUBST(ACLOCAL_AMFLAGS)

IT_PROG_INTLTOOL([0.35.0])

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

dnl
dnl Check for -lX11 (for XUngrabServer in gnome-ui-init.c) and set
dnl X11_CFLAGS and X11_LIBS
dnl

GNOME_HAVE_X11=yes
PKG_CHECK_MODULES(X11, x11, :, [
# pkg-config modules not found (only present since X11R7); use old-style
# detection
AC_PATH_XTRA
# X found
if test x$no_x != xyes ; then
    libgnomeui_save_cflags="$CFLAGS"
    libgnomeui_save_libs="$LIBS"
    CFLAGS="$X_CFLAGS"
    LIBS="$X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS"
    AC_CHECK_LIB(X11,
                 XUngrabServer,
                 [X11_CFLAGS="$X_CFLAGS"
                  X11_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"],
                 GNOME_HAVE_X11=no)
    CFLAGS="$libgnomeui_save_cflags"
    LIBS="$libgnomeui_save_libs"
else
    GNOME_HAVE_X11=no
fi
])



case "$host" in
  *-*-mingw*)
    os_win32=yes
    gnome_keyring_requirement=""
    GNOME_KEYRING=""
    ;;
  *)
    os_win32=no
    gnome_keyring_requirement="gnome-keyring-1 >= gnome_keyring_required_version"
    GNOME_KEYRING="gnome-keyring-1"

    if test x$GNOME_HAVE_X11 != xyes ; then
        AC_MSG_ERROR([libX11 not found])
    fi
    ;;
esac
AM_CONDITIONAL(OS_WIN32, [test "$os_win32" = "yes"])
AC_SUBST(GNOME_KEYRING)

GETTEXT_PACKAGE=libgnomeui-2.0
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",
                   [Name of gettext translation domain for library])

AM_GLIB_GNU_GETTEXT
AM_GLIB_DEFINE_LOCALEDIR([GNOMEUILOCALEDIR])

GNOME_COMPILE_WARNINGS

dnl Define GNOME_ENABLE_DEBUG if the --enable-debug switch was given.
GNOME_DEBUG_CHECK

dnl
dnl Check for -lSM (for gnome-client)
dnl

GNOME_HAVE_SM=true
PKG_CHECK_MODULES(SM, sm ice, :, [
# pkg-config modules not found (only present since X11R7); use old-style
# detection
AC_PATH_XTRA
# X found
if test x$no_x != xyes ; then
    libgnomeui_save_cflags="$CFLAGS"
    libgnomeui_save_libs="$LIBS"
    CFLAGS="$X_CFLAGS"
    LIBS="$X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS"
    AC_CHECK_LIB(SM,
                 SmcSaveYourselfDone,
                 [SM_CFLAGS="$X_CFLAGS"
                  SM_LIBS="$X_PRE_LIBS $X_LIBS -lSM -lICE $X_EXTRA_LIBS"],
                 GNOME_HAVE_SM=false,
                 $X_LIBS -lICE)
    AC_CHECK_HEADERS(X11/SM/SMlib.h, :, GNOME_HAVE_SM=false)
    CFLAGS="$libgnomeui_save_cflags"
    LIBS="$libgnomeui_save_libs"
else
    GNOME_HAVE_SM=false
fi
])

if test "$GNOME_HAVE_SM" = true; then
	AC_DEFINE(HAVE_LIBSM, 1, [Define to 1 if you have libSM installed])
fi

dnl
dnl Start of pkg-config checks
dnl

dnl
dnl libjpeg
dnl

AC_ARG_WITH(libjpeg,  [  --without-libjpeg       build without JPEG support])
if test x$with_libjpeg != xno && test -z "$LIBJPEG"; then
	AC_CHECK_LIB(jpeg, jpeg_start_decompress,
		[AC_CHECK_HEADER(jpeglib.h, jpeg_ok=yes, jpeg_ok=no)],
		AC_MSG_WARN(*** (jpeg library not found) ***), -lm)
	if test "$jpeg_ok" = yes; then
		JPEG='jpeg'; LIBJPEG='-ljpeg'
		AC_DEFINE(HAVE_LIBJPEG, 1, [Define to 1 if you have libjpeg installed])
	fi
fi

if test x$with_libjpeg != xno && test -z "$LIBJPEG"; then
	AC_MSG_ERROR([
*** Checks for JPEG library failed. You can build without it by passing 
*** --without-libjpeg to configure but the JPEG thumbnail loader will not
*** be built then.])
fi

AC_SUBST(LIBJPEG)

GNOMEUI_MODULES="dnl
  libxml-2.0 >= libxml_required_version dnl
  libgnome-2.0 >= libgnome_required_version dnl
  libgnomecanvas-2.0 >= libgnomecanvas_required_version dnl
  libbonoboui-2.0 >= libbonoboui_required_version dnl
  gconf-2.0 >= gconf_required_version dnl
  pango >= pango_required_version dnl
  glib-2.0 >= glib_required_version
  gnome-vfs-2.0 >= gnomevfs_required_version dnl
  $gnome_keyring_requirement"
PKG_CHECK_MODULES(LIBGNOMEUI, [$GNOMEUI_MODULES])
LIBGNOMEUI_CFLAGS="$X_CFLAGS $LIBGNOMEUI_CFLAGS"
LIBGNOMEUI_LIBS="$LIBGNOMEUI_LIBS $LIBJPEG"

GNOME_TEST_MODULES="dnl
  gdk-pixbuf-2.0 >= gtk_required_version"
PKG_CHECK_MODULES(GNOME_TEST, [$GNOME_TEST_MODULES])
GNOME_TEST_LIBS="$LIBGNOMEUI_LIBS $GNOME_TEST_LIBS"

PKG_CHECK_MODULES(LIBGNOMEUI_COMPONENTS, [$GNOMEUI_MODULES])
PKG_CHECK_MODULES(LIBGNOMEUI_DEMOS, [$GNOMEUI_MODULES])
PKG_CHECK_MODULES(LIBGNOMEUI_GLADE, [$GNOMEUI_MODULES dnl
  libglade-2.0 >= libglade_required_version])

dnl File Chooser stuff
PKG_CHECK_MODULES(FILE_SYSTEM,
 [gtk+-2.0 >= gtk_required_version dnl
  libgnome-2.0 >= libgnome_required_version dnl
  gnome-vfs-2.0 >= gnomevfs_required_version])

GTK_BINARY_VERSION=`$PKG_CONFIG --variable=gtk_binary_version gtk+-2.0`
AC_SUBST(GTK_BINARY_VERSION)
	
dnl
dnl Check for gtk-doc
dnl
GTK_DOC_CHECK([1.0])


dnl AC_SUBST GTK+ version
GTK_VERSION=`$PKG_CONFIG --modversion gtk+-2.0`
AC_SUBST(GTK_VERSION)

AC_MSG_CHECKING([for gtk+ multihead support])
if $PKG_CONFIG --atleast-version 2.1.0 gtk+-2.0; then
   AC_DEFINE(HAVE_GTK_MULTIHEAD,,[gtk+ with multihead support found])
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi

AC_CHECK_LIB(popt, poptStrippedArgv,, AC_MSG_ERROR([popt 1.5 or newer is required to build
libgnomeui. You can download the latest version from ftp://ftp.rpm.org/pub/rpm/dist/rpm-4.0.x/]))

AC_CHECK_HEADERS(locale.h unistd.h)
AC_CHECK_FUNCS(bind_textdomain_codeset)

dnl Checks for Apple Darwin

AC_CHECK_FUNC(_NSGetEnviron, have_ns_getenviron=yes)
if test x$have_ns_getenviron = xyes; then
  AC_DEFINE(HAVE_NSGETENVIRON, 1, [whether we have _NSGetEnviron])
fi
AC_CHECK_HEADER(crt_externs.h, have_crt_externs=yes)
if test x$have_crt_externs = xyes; then
  AC_DEFINE(HAVE_CRT_EXTERNS_H, 1, [whether we have crt_externs.h])
fi

dnl For file-chooser/sucky-desktop-item.c.
AC_ARG_WITH(kde-datadir, [  --with-kde-datadir=DIR  Location of KDE data])
if test "x$with_kde_datadir" = x ; then
  kde_datadir=/usr/share
else
  kde_datadir=$with_kde_datadir
fi
AC_DEFINE_UNQUOTED(KDE_ICONDIR, "$kde_datadir/icons",
                   [The KDE icon directory])

dnl This is installed from GTK+ 2.0's gdk-pixbuf
AC_PATH_PROG(GDK_PIXBUF_CSOURCE, gdk-pixbuf-csource)
test -z "$GDK_PIXBUF_CSOURCE" && AC_MSG_ERROR([
*** You need the gdk-pixbuf-csource tool which is installed
*** from GTK+ 2.0's gdk-pixbuf.
***
*** Either the location where you installed your GTK+ 2.0 is
*** not in your PATH or something is screwed up with your
*** GTK+ 2.0 installation
])

dnl Don't use AC_PROG_AWK since we need the full pathname.
AC_PATH_PROGS(AWK, mawk gawk nawk awk, )
AC_PATH_PROGS(PERL, perl5 perl)

AC_PATH_PROG(GCONFTOOL, gconftool-2)

# define a MAINT-like variable REBUILD which is set if Perl
# and awk are found, so autogenerated sources can be rebuilt
AC_ARG_ENABLE(rebuilds,
              AC_HELP_STRING([--disable-rebuilds],
                             [disable all source autogeneration rules]),,
              [enable_rebuilds=yes])
REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
     test -n "$PERL" && \
     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 && \
     test -n "$AWK" ; then
  REBUILD=
fi
AC_SUBST(REBUILD)

AC_CONFIG_FILES([
Makefile
libgnomeui-zip
po/Makefile.in
libgnomeui/Makefile
libgnomeui/libgnomeui-2.0.pc
libgnomeui/pixmaps/Makefile
file-chooser/Makefile
glade/Makefile
images/Makefile
demos/Makefile
test-gnome/Makefile
doc/Makefile
doc/reference/Makefile
doc/reference/version.xml
])

AC_OUTPUT
echo "configuration:
	doc build:   ${enable_gtk_doc}
"
